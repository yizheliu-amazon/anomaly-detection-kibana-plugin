function cov_530btwhx() {
  var path = "/Users/yizheliu/casesafe/workspace/kibana-780/kibana/plugins/anomaly-detection-kibana-plugin/public/pages/AnomalyCharts/utils/constants.ts";
  var hash = "121965df4e96ca2470726c356532c6e4a80dc75b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/yizheliu/casesafe/workspace/kibana-780/kibana/plugins/anomaly-detection-kibana-plugin/public/pages/AnomalyCharts/utils/constants.ts",
    statementMap: {
      "0": {
        start: {
          line: 16,
          column: 39
        },
        end: {
          line: 23,
          column: 1
        }
      },
      "1": {
        start: {
          line: 43,
          column: 35
        },
        end: {
          line: 62,
          column: 1
        }
      },
      "2": {
        start: {
          line: 64,
          column: 35
        },
        end: {
          line: 73,
          column: 1
        }
      },
      "3": {
        start: {
          line: 75,
          column: 41
        },
        end: {
          line: 85,
          column: 1
        }
      },
      "4": {
        start: {
          line: 92,
          column: 39
        },
        end: {
          line: 99,
          column: 1
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "121965df4e96ca2470726c356532c6e4a80dc75b"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_530btwhx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_530btwhx();

/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
export const INITIAL_ANOMALY_SUMMARY = (cov_530btwhx().s[0]++, {
  anomalyOccurrence: 0,
  minAnomalyGrade: 0.0,
  maxAnomalyGrade: 0.0,
  minConfidence: 0.0,
  maxConfidence: 0.0,
  lastAnomalyOccurrence: ''
});
export enum ANOMALY_CHART_TITLE {
  SAMPLE_ANOMALY_HISTORY = 'Sample anomaly history',
  ANOMALY_HISTORY = 'Sample anomaly history',
}
export enum CHART_FIELDS {
  PLOT_TIME = 'plotTime',
  ANOMALY_GRADE = 'anomalyGrade',
  CONFIDENCE = 'confidence',
  DATA = 'data',
}
export enum CHART_COLORS {
  ANOMALY_GRADE_COLOR = '#D13212',
  FEATURE_DATA_COLOR = '#16191F',
  CONFIDENCE_COLOR = '#017F75',
}
export const FEATURE_CHART_THEME = (cov_530btwhx().s[1]++, [{
  lineSeriesStyle: {
    line: {
      strokeWidth: 2,
      visible: true,
      opacity: 0.5
    },
    point: {
      visible: true,
      stroke: CHART_COLORS.FEATURE_DATA_COLOR
    }
  }
}, {
  colors: {
    vizColors: [CHART_COLORS.FEATURE_DATA_COLOR]
  }
}]);
export const ANOMALY_CHART_THEME = (cov_530btwhx().s[2]++, [{
  colors: {
    vizColors: [CHART_COLORS.CONFIDENCE_COLOR, CHART_COLORS.ANOMALY_GRADE_COLOR]
  }
}]);
export const DATE_PICKER_QUICK_OPTIONS = (cov_530btwhx().s[3]++, [{
  start: 'now-24h',
  end: 'now',
  label: 'last 24 hours'
}, {
  start: 'now-7d',
  end: 'now',
  label: 'last 7 days'
}, {
  start: 'now-30d',
  end: 'now',
  label: 'last 30 days'
}, {
  start: 'now-90d',
  end: 'now',
  label: 'last 90 days'
}, {
  start: 'now/d',
  end: 'now',
  label: 'Today'
}, {
  start: 'now/w',
  end: 'now',
  label: 'Week to date'
}, {
  start: 'now/M',
  end: 'now',
  label: 'Month to date'
}, {
  start: 'now/y',
  end: 'now',
  label: 'Year to date'
}]);
export enum LIVE_CHART_CONFIG {
  REFRESH_INTERVAL_IN_SECONDS = 30 * 1000,
  //poll anomaly result every 30 seconds
  MONITORING_INTERVALS = 60,
}
export const DEFAULT_ANOMALY_SUMMARY = (cov_530btwhx().s[4]++, {
  anomalyOccurrence: 0,
  minAnomalyGrade: 0,
  maxAnomalyGrade: 0,
  minConfidence: 0,
  maxConfidence: 0,
  lastAnomalyOccurrence: '-'
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnN0YW50cy50cyJdLCJuYW1lcyI6WyJJTklUSUFMX0FOT01BTFlfU1VNTUFSWSIsImFub21hbHlPY2N1cnJlbmNlIiwibWluQW5vbWFseUdyYWRlIiwibWF4QW5vbWFseUdyYWRlIiwibWluQ29uZmlkZW5jZSIsIm1heENvbmZpZGVuY2UiLCJsYXN0QW5vbWFseU9jY3VycmVuY2UiLCJBTk9NQUxZX0NIQVJUX1RJVExFIiwiU0FNUExFX0FOT01BTFlfSElTVE9SWSIsIkFOT01BTFlfSElTVE9SWSIsIkNIQVJUX0ZJRUxEUyIsIlBMT1RfVElNRSIsIkFOT01BTFlfR1JBREUiLCJDT05GSURFTkNFIiwiREFUQSIsIkNIQVJUX0NPTE9SUyIsIkFOT01BTFlfR1JBREVfQ09MT1IiLCJGRUFUVVJFX0RBVEFfQ09MT1IiLCJDT05GSURFTkNFX0NPTE9SIiwiRkVBVFVSRV9DSEFSVF9USEVNRSIsImxpbmVTZXJpZXNTdHlsZSIsImxpbmUiLCJzdHJva2VXaWR0aCIsInZpc2libGUiLCJvcGFjaXR5IiwicG9pbnQiLCJzdHJva2UiLCJjb2xvcnMiLCJ2aXpDb2xvcnMiLCJBTk9NQUxZX0NIQVJUX1RIRU1FIiwiREFURV9QSUNLRVJfUVVJQ0tfT1BUSU9OUyIsInN0YXJ0IiwiZW5kIiwibGFiZWwiLCJMSVZFX0NIQVJUX0NPTkZJRyIsIlJFRlJFU0hfSU5URVJWQUxfSU5fU0VDT05EUyIsIk1PTklUT1JJTkdfSU5URVJWQUxTIiwiREVGQVVMVF9BTk9NQUxZX1NVTU1BUlkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWVZOzs7Ozs7Ozs7O0FBZlo7Ozs7Ozs7Ozs7Ozs7O0FBZUEsT0FBTyxNQUFNQSx1QkFBdUIsMkJBQUc7QUFDckNDLEVBQUFBLGlCQUFpQixFQUFFLENBRGtCO0FBRXJDQyxFQUFBQSxlQUFlLEVBQUUsR0FGb0I7QUFH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QUFZUCxPQUFPLEtBQUtDLGlCQUFMO0FBQ0xDLEVBQUFBLDJCQUEyQixHQUFHLEtBQUssSUFBUjtBQUFjO0FBQ3pDQyxFQUFBQSxvQkFBb0IsR0FBRyxFQUFIO0FBRmY7QUFLUCxPQUFPLE1BQU1DLHVCQUF1QiwyQkFBRztBQUNyQ3BDLEVBQUFBLGlCQUFpQixFQUFFLENBRGtCO0FBRXJDQyxFQUFBQSxlQUFlLEVBQUUsQ0FGb0I7QUFHckNDLEVBQUFBLGVBQWUsRUFBRSxDQUhvQjtBQUlyQ0MsRUFBQUEsYUFBYSxFQUFFLENBSnNCO0FBS3JDQyxFQUFBQSxhQUFhLEVBQUUsQ0FMc0I7QUFNckNDLEVBQUFBLHFCQUFxQixFQUFFO0FBTmMsQ0FBSCxDQUE3QiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikuXG4gKiBZb3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIG9yIGluIHRoZSBcImxpY2Vuc2VcIiBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZFxuICogb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyXG4gKiBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZ1xuICogcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmV4cG9ydCBjb25zdCBJTklUSUFMX0FOT01BTFlfU1VNTUFSWSA9IHtcbiAgYW5vbWFseU9jY3VycmVuY2U6IDAsXG4gIG1pbkFub21hbHlHcmFkZTogMC4wLFxuICBtYXhBbm9tYWx5R3JhZGU6IDAuMCxcbiAgbWluQ29uZmlkZW5jZTogMC4wLFxuICBtYXhDb25maWRlbmNlOiAwLjAsXG4gIGxhc3RBbm9tYWx5T2NjdXJyZW5jZTogJycsXG59O1xuXG5leHBvcnQgZW51bSBBTk9NQUxZX0NIQVJUX1RJVExFIHtcbiAgU0FNUExFX0FOT01BTFlfSElTVE9SWSA9ICdTYW1wbGUgYW5vbWFseSBoaXN0b3J5JyxcbiAgQU5PTUFMWV9ISVNUT1JZID0gJ1NhbXBsZSBhbm9tYWx5IGhpc3RvcnknLFxufVxuXG5leHBvcnQgZW51bSBDSEFSVF9GSUVMRFMge1xuICBQTE9UX1RJTUUgPSAncGxvdFRpbWUnLFxuICBBTk9NQUxZX0dSQURFID0gJ2Fub21hbHlHcmFkZScsXG4gIENPTkZJREVOQ0UgPSAnY29uZmlkZW5jZScsXG4gIERBVEEgPSAnZGF0YScsXG59XG5cbmV4cG9ydCBlbnVtIENIQVJUX0NPTE9SUyB7XG4gIEFOT01BTFlfR1JBREVfQ09MT1IgPSAnI0QxMzIxMicsXG4gIEZFQVRVUkVfREFUQV9DT0xPUiA9ICcjMTYxOTFGJyxcbiAgQ09ORklERU5DRV9DT0xPUiA9ICcjMDE3Rjc1Jyxcbn1cblxuZXhwb3J0IGNvbnN0IEZFQVRVUkVfQ0hBUlRfVEhFTUUgPSBbXG4gIHtcbiAgICBsaW5lU2VyaWVzU3R5bGU6IHtcbiAgICAgIGxpbmU6IHtcbiAgICAgICAgc3Ryb2tlV2lkdGg6IDIsXG4gICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgIG9wYWNpdHk6IDAuNSxcbiAgICAgIH0sXG4gICAgICBwb2ludDoge1xuICAgICAgICB2aXNpYmxlOiB0cnVlLFxuICAgICAgICBzdHJva2U6IENIQVJUX0NPTE9SUy5GRUFUVVJFX0RBVEFfQ09MT1IsXG4gICAgICB9LFxuICAgIH0sXG4gIH0sXG4gIHtcbiAgICBjb2xvcnM6IHtcbiAgICAgIHZpekNvbG9yczogW0NIQVJUX0NPTE9SUy5GRUFUVVJFX0RBVEFfQ09MT1JdLFxuICAgIH0sXG4gIH0sXG5dO1xuXG5leHBvcnQgY29uc3QgQU5PTUFMWV9DSEFSVF9USEVNRSA9IFtcbiAge1xuICAgIGNvbG9yczoge1xuICAgICAgdml6Q29sb3JzOiBbXG4gICAgICAgIENIQVJUX0NPTE9SUy5DT05GSURFTkNFX0NPTE9SLFxuICAgICAgICBDSEFSVF9DT0xPUlMuQU5PTUFMWV9HUkFERV9DT0xPUixcbiAgICAgIF0sXG4gICAgfSxcbiAgfSxcbl07XG5cbmV4cG9ydCBjb25zdCBEQVRFX1BJQ0tFUl9RVUlDS19PUFRJT05TID0gW1xuICB7IHN0YXJ0OiAnbm93LTI0aCcsIGVuZDogJ25vdycsIGxhYmVsOiAnbGFzdCAyNCBob3VycycgfSxcbiAgeyBzdGFydDogJ25vdy03ZCcsIGVuZDogJ25vdycsIGxhYmVsOiAnbGFzdCA3IGRheXMnIH0sXG4gIHsgc3RhcnQ6ICdub3ctMzBkJywgZW5kOiAnbm93JywgbGFiZWw6ICdsYXN0IDMwIGRheXMnIH0sXG4gIHsgc3RhcnQ6ICdub3ctOTBkJywgZW5kOiAnbm93JywgbGFiZWw6ICdsYXN0IDkwIGRheXMnIH0sXG5cbiAgeyBzdGFydDogJ25vdy9kJywgZW5kOiAnbm93JywgbGFiZWw6ICdUb2RheScgfSxcbiAgeyBzdGFydDogJ25vdy93JywgZW5kOiAnbm93JywgbGFiZWw6ICdXZWVrIHRvIGRhdGUnIH0sXG4gIHsgc3RhcnQ6ICdub3cvTScsIGVuZDogJ25vdycsIGxhYmVsOiAnTW9udGggdG8gZGF0ZScgfSxcbiAgeyBzdGFydDogJ25vdy95JywgZW5kOiAnbm93JywgbGFiZWw6ICdZZWFyIHRvIGRhdGUnIH0sXG5dO1xuXG5leHBvcnQgZW51bSBMSVZFX0NIQVJUX0NPTkZJRyB7XG4gIFJFRlJFU0hfSU5URVJWQUxfSU5fU0VDT05EUyA9IDMwICogMTAwMCwgLy9wb2xsIGFub21hbHkgcmVzdWx0IGV2ZXJ5IDMwIHNlY29uZHNcbiAgTU9OSVRPUklOR19JTlRFUlZBTFMgPSA2MCxcbn1cblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfQU5PTUFMWV9TVU1NQVJZID0ge1xuICBhbm9tYWx5T2NjdXJyZW5jZTogMCxcbiAgbWluQW5vbWFseUdyYWRlOiAwLFxuICBtYXhBbm9tYWx5R3JhZGU6IDAsXG4gIG1pbkNvbmZpZGVuY2U6IDAsXG4gIG1heENvbmZpZGVuY2U6IDAsXG4gIGxhc3RBbm9tYWx5T2NjdXJyZW5jZTogJy0nLFxufTtcbiJdfQ==